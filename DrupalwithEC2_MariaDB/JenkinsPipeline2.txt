pipeline {
    agent {
        node {
            label 'master'
        }
    }
    options {
    preserveStashes() 
    }
    stages {
        stage('Terraform Clone') {
            steps {
                checkout([$class: 'GitSCM', branches: [[name: '*/master']], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'f833ab8e-825d-4f6b-82d7-b629737cfdc4', url: 'https://github.com/1996karthick/drupal2.git']]])
            }
        }
		stage('Server Configuration'){
            steps {
               script {
			      instance="${params.Env}"
			          if ("$instance" == "single"){
                            
                            sh "sed -i '134,271 s/^/#/' main.tf"
                            sh 'echo "Everything is Perfect, Go Ahead for Singleserver!!!"'
                        }
					  else{
					        sh "sed -i '21,24 s/^/#/' install.sh"
		                    sh 'echo "Everything is Perfect, Go Ahead for Multiserver!!!"'
		                }
                }
            }
        }
        stage('Parameters'){
            steps {
                sh label: '', script: ''' sed -i \"s/user/$access_key/g\" /var/lib/jenkins/workspace/drupal2/variables.tf
                sed -i \"s/password/$secret_key/g\" /var/lib/jenkins/workspace/drupal2/variables.tf
                sed -i \"s/t2.micro/$instance_type/g\" /var/lib/jenkins/workspace/drupal2/variables.tf
                sed -i \"s/10/$instance_size/g\" /var/lib/jenkins/workspace/drupal2/main.tf
                '''
                }
            }
            
        stage('Terraform init') {
            steps {
                sh 'terraform init'
            }
        }
        stage('Terraform plan') {
            steps {
                sh 'terraform plan'
            }
        }
        stage('Terraform apply') {
            steps {
                sh 'terraform apply -auto-approve'
                sleep 90
            }
        }
		stage("Git Checkout") {
	     steps {
		  checkout([$class: 'GitSCM', branches: [[name: '*/deploy']], doGenerateSubmoduleConfigurations: false, extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: 'drupal2codebase']], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'f833ab8e-825d-4f6b-82d7-b629737cfdc4', url: 'https://github.com/1996karthick/drupal2.git']]])
           }
        }
		stage('SonarQube analysis') {
	     steps {
	       script {
           scannerHome = tool 'sonarqube';
           withSonarQubeEnv('sonarqube') {
		   sh "${scannerHome}/bin/sonar-scanner -Dsonar.projectKey=zippyops:drupal2 -Dsonar.projectName=drupal2 -Dsonar.projectVersion=1.0 -Dsonar.projectBaseDir=${WORKSPACE}/drupal2codebase -Dsonar.sources=${WORKSPACE}/drupal2codebase -Dsonar.exclusions=**/drupal/core/modules/**,**/drupal/themes/**,**/drupal/vendor/**,**/drupal/sites/default/files/js/*.js,**/drupal/core/lib/**"
            }
	      }
		}
	    }
        stage("Sonarqube Quality Gate") {
	     steps {
	      script { 
            sleep(80)
            qg = waitForQualityGate() 
		    }
           }
        }
	     stage('Application Deployment') {
          steps {
		     script {
			      instance="${params.Env}"
			          if ("$instance" == "single"){
                            sh label: '', script: '''pubIP=$(<publicip)
                            echo "$pubIP"
                            ssh -tt -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ec2-user@$pubIP /bin/bash << EOF
                            git clone -b deploy https://github.com/1996karthick/drupal2.git
							sleep 5
                            sudo /bin/su - root
                            sleep 5
                            cd /home/ec2-user/drupal2
							mysql -u zippyops -pzippyops zippyops_db < zippyops_db.sql
                            yes | cp -Rf drupal /var/www/html/
                            systemctl restart httpd
                            exit
                            sleep 5
                            exit
							EOF
							'''
                      }
					  else{
		                   sh label: '', script: '''pubIP=$(<publicip)
                           echo "$pubIP"
						   priIP=$(<privateip)
                           echo "$priIP"
                           MpriIP=$(<privateip2)
                           echo "$MpriIP"
						   ssh -tt -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no ec2-user@$pubIP /bin/bash << EOF
						   git clone -b deploy https://github.com/1996karthick/drupal2.git
						   sleep 5
                           sudo /bin/su - root
                           sleep 5
                           cd /home/ec2-user/drupal2
						   yes | cp -Rf drupal /var/www/html/
						   cd /var/www/html/drupal/sites/default
                           sed -i 's/localhost/$MpriIP/g' settings.php
                           cd /home/ec2-user/drupal2
						   mysql -u zippyops -pzippyops -h $MpriIP zippyops_db < zippyops_db.sql
						   systemctl restart httpd
                           exit
                           sleep 5
                           exit
						   EOF
                           '''
		              }
                } 
            }
        }
	    stage('VAPT') {
            steps {
                 sh label: '', script: '''pubIP=$(<publicip)
                 echo "$pubIP"
                 ssh -tt root@192.168.5.14 << SSH_EOF
                 echo "open vas server"
                 nohup ./code16.py $pubIP &
                 sleep 5
                 exit
                 SSH_EOF 
                 '''
            }
        }
        stage('OWASP'){
            steps {
                   sh label: '', script: '''pubIP=$(<publicip)
                   echo "$pubIP"
                   mkdir -p $WORKSPACE/out
                   chmod 777 $WORKSPACE/out
                   rm -f $WORKSPACE/out/*.*
                   ls -la
                   sudo docker run --rm --network=host -v /var/lib/jenkins/workspace/drupal2/out:/zap/wrk/:rw -t docker.io/owasp/zap2docker-stable zap-baseline.py -t http://$pubIP/drupal/* -m 15 -d -r Drupal2_Dev_ZAP_VULNERABILITY_REPORT_${BUILD_ID}.html -x Drupal2_Dev_ZAP_VULNERABILITY_REPORT_${BUILD_ID}.xml || true
                   '''
                   archiveArtifacts artifacts: 'out/**/*'
		    }
        } 
        stage('LinkChecker'){
            steps {
                   sh label: '', script: '''pubIP=$(<publicip)
                   echo "$pubIP"
                   date
                   sudo docker run --rm --network=host ktbartholomew/link-checker --concurrency 30 --threshold 0.05 http://$pubIP/drupal/* > $WORKSPACE/brokenlink_${BUILD_ID}.html || true
                   date
                   '''
                   archiveArtifacts artifacts: 'brokenlink_${BUILD_ID}.html'
                   }
        }
        stage('SpeedTest') {
	      steps {
                   sh label: '', script: '''pubIP=$(<publicip)
                   echo "$pubIP"
		           cp -r /var/lib/jenkins/speedtest/budget.json  ${WORKSPACE}
                   sudo docker run --rm --network=host -v ${WORKSPACE}:/sitespeed.io sitespeedio/sitespeed.io http://$pubIP/drupal/* --outputFolder junitoutput --budget.configPath budget.json --budget.output junit -b chrome -n 1  || true
		           '''
		           archiveArtifacts artifacts: 'junitoutput/**/*'
		  }
	    }
        stage('Deployed') {
            steps {
                 sh label: '', script: '''rm -rf publicip privateip privateip2
                 echo "Deployed"
                 '''
            }
        }
        
    }
    post {
        always {
        publishHTML target: [
              allowMissing: false,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: '/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_ID}/archive/junitoutput',
              reportFiles: 'index.html',
              reportName: 'Dev_speedtest'
			  ]
        publishHTML target: [
              allowMissing: false,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: '/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_ID}/archive',
              reportFiles: 'brokenlink_${BUILD_ID}.html',
              reportName: 'Dev_linkcheck'
              ]
		publishHTML target: [
              allowMissing: false,
              alwaysLinkToLastBuild: true,
              keepAll: true,
              reportDir: '/var/lib/jenkins/jobs/${JOB_NAME}/builds/${BUILD_ID}/archive/out',
              reportFiles: 'Drupal_Dev_ZAP_VULNERABILITY_REPORT_${BUILD_ID}.html',
              reportName: 'Dev_owasp'
              ]
            }
        }
}